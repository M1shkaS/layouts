----------flexbox---------------

1.flex-direction:(значение)
Доступные значения flex-direction:
	row (значение по умолчанию) : слева направо (в rtl справа налево)
	row-reverse: справа налево (в rtl слева направо)
	column: сверху вниз
	column-reverse: снизу вверх
2.justify-content – выравнивание по главной оси.
Доступные значения justify-content:
	flex-start (значение по умолчанию) : блоки прижаты к началу главной оси
	flex-end: блоки прижаты к концу главной оси
	center: блоки располагаются в центре главной оси
	space-between: первый блок располагается в начале главной оси, последний блок – в конце, все остальные блоки равномерно распределены в оставшемся пространстве.
	space-around: все блоки равномерно распределены вдоль главной оси, разделяя все свободное пространство поровну.
3.align-items – выравнивание по поперечной оси.
Доступные значения align-items:
	flex-start: блоки прижаты к началу поперечной оси
	flex-end: блоки прижаты к концу поперечной оси
	center: блоки располагаются в центре поперечной оси
	baseline: блоки выровнены по их baseline
	stretch (значение по умолчанию) : блоки растянуты, занимая все доступное место по поперечной оси, при этом все же учитываются min-width/max-width, если таковые заданы.
4.flex-wrap
Доступные значения flex-wrap:
	nowrap (значение по умолчанию) : блоки расположены в одну линию слева направо (в rtl справа налево)
	wrap: блоки расположены в несколько горизонтальных рядов (если не помещаются в один ряд). Они следуют друг за другом слева направо (в rtl справа налево)
	wrap-reverse: то-же что и wrap, но блоки располагаются в обратном порядке.
5.flex-flow – удобное сокращение для flex-direction + flex-wrap
	flex-flow: <‘flex-direction’> || <‘flex-wrap’>
	flex-flow: row nowrap
6.align-content
Доступные значения align-content:
	flex-start: ряды блоков прижаты к началу flex-контейнера.
	flex-end: ряды блоков прижаты к концу flex-контейнера
	center: ряды блоков находятся в центре flex-контейнера
	space-between: первый ряд блоков располагается в начале flex-контейнера, последний ряд блоков блок – в конце, все остальные ряды равномерно распределены в оставшемся пространстве.
	space-around: ряды блоков равномерно распределены в от начала до конца flex-контейнера, разделяя все свободное пространство поровну.
	stretch (значение по умолчанию): Ряды блоков растянуты, дабы занять все имеющееся пространство.
7.flex-basis – базовый размер отдельно взятого flex-блока
8.flex-grow – “жадность” отдельно взятого flex-блока
Определяет то, на сколько отдельный flex-блок может быть больше соседних элементов, если это необходимо. flex-grow принимает безразмерное значение ( по умолчанию 0)
9.flex-shrink – фактор “сжимаемости” отдельно взятого flex-блока
Определяет, насколько flex-блок будет уменьшаться относительно соседних эдементов внутри flex-контейнера в случае недостатка свободного места. По умолчанию равен 1.
flex – короткая запись для свойств flex-grow, flex-shrink и flex-basis
flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]

----------Изображения---------------
Если хотим изображение по центру, то делаем :
	display:inline-block
	margin: 0 autu
Ещё можно с помощью:
задать родителям фиксировнуую высоту и ширину и обьявить
img{
       
    width: 100%;
    height: 100%;
    object-fit: cover;
}

----------Grid---------------

/* Стили применяются для родительского блока, в котором лежат все остальные элементы*/

.grid	{	display: grid;
	grid-template-rows: 100px 100px; /* задается высота для ряда (первые 2 ряда по 100 пикс) */
	grid-auto-rows: 80px; /* задается высота для всех последующих рядов */
	grid-column-gap: 20px; /* задается отступ для колонок */
	grid-row-gap: 20px; /* задается отступ для рядов */
	column-gap
	row-gap
	grid-row-gap: 20px; /* задается отступ для колонок и рядов */
	grid-template-columns: 1fr 1fr 100px ; /* задается ширина для колонок (1 колонка 1 фракция, вторая - 1, третья 100пикс)*/
}

 /* Особые положения
grid-auto-rows: minmax(100px, auto); /* задается высота для всех рядов со значением минимума 100пикс а максимум по высоте контента
grid-template-columns: repeat (3, 1fr); - задается ширина для 3 колонок по 1 фракции
grid-template-columns: repeat (2, 1fr 2fr); - задается ширина для 1, 2 колонки 1 фракция, 2 для других
grid-template-columns: minmax(200px, 350px) 1fr 2fr ; /* ADAPTIVE - задается мин и макс ширина для первой колонки а 2 и третей по 1 фракции  
подробнее: https://www.youtube.com/watch?v=-fDqBEjfzGo
 */

----------Mobile-first---------------
В десктопной версии мы в медиа правилах делаем max-width, а в мобилке min-width

----------Вопросы---------------
Зачем нужны вендорные префиксы в css?
Для одинаковой поддержки всех свойств в любых браузерах

Что такое псевдоклассы в CSS?
Это параметры,которые добавляются css селектору и определяетего особое состояние